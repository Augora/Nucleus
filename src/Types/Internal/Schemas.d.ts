import { GraphQLResolveInfo, GraphQLScalarType } from "graphql";
/**
 * This file is auto-generated by @pongsatt/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  DeputesEnMandat: GQLDeputePage;
  Depute?: GQLDepute;

  /**
   * Find a document from the collection of 'Depute' by its id.
   */
  findDeputeByID?: GQLDepute;
  Deputes: GQLDeputePage;

  /**
   * Find a document from the collection of 'AutreMandat' by its id.
   */
  findAutreMandatByID?: GQLAutreMandat;

  /**
   * Find a document from the collection of 'AncienMandat' by its id.
   */
  findAncienMandatByID?: GQLAncienMandat;
}

/**
 * The pagination object for elements of type 'Depute'.
 */
export interface GQLDeputePage {
  /**
   * The elements of type 'Depute' in this page.
   */
  data: (GQLDepute | null)[];

  /**
   * A cursor for elements coming after the current page.
   */
  after?: string;

  /**
   * A cursor for elements coming before the current page.
   */
  before?: string;
}

export interface GQLDepute {
  LieuDeNaissance?: string;
  SitesWeb?: (string | null)[];
  DebutDuMandat?: string;
  NumeroDepartement?: string;
  Slug?: string;
  parti_ratt_financier?: string;
  URLNosdeputes?: string;

  /**
   * The document's ID.
   */
  _id?: string;
  Emails?: (string | null)[];
  URLNosdeputesAPI?: string;
  Twitter?: string;
  NomDeFamille?: string;
  NomCirconscription?: string;
  Profession?: string;
  AutresMandats: GQLAutreMandatPage;
  NombreMandats?: number;
  Prenom?: string;
  Nom?: string;
  Sexe?: GQLSexe;
  DateDeNaissance?: string;
  NumeroCirconscription?: number;
  PlaceEnHemicycle?: string;
  IDAssembleeNationnale?: string;
  Adresses?: (string | null)[];
  URLAssembleeNationnale?: string;
  Collaborateurs?: (string | null)[];
  AnciensMandats: GQLAncienMandatPage;

  /**
   * The document's timestamp.
   */
  _ts?: GQLLong;
  SigleGroupePolitique?: GQLGroupeSigle;
}

/**
 * The pagination object for elements of type 'AutreMandat'.
 */
export interface GQLAutreMandatPage {
  /**
   * The elements of type 'AutreMandat' in this page.
   */
  data: (GQLAutreMandat | null)[];

  /**
   * A cursor for elements coming after the current page.
   */
  after?: string;

  /**
   * A cursor for elements coming before the current page.
   */
  before?: string;
}

export interface GQLAutreMandat {
  Institution?: string;

  /**
   * The document's ID.
   */
  _id?: string;
  Depute?: GQLDepute;
  Localite?: string;
  Intitule?: string;

  /**
   * The document's timestamp.
   */
  _ts?: GQLLong;
}

/**
 * The `Long` scalar type represents non-fractional signed whole numeric values.
 * Long can represent values between -(2^63) and 2^63 - 1.
 */
export type GQLLong = any;

export enum GQLSexe {
  F = "F",
  H = "H"
}

/**
 * The pagination object for elements of type 'AncienMandat'.
 */
export interface GQLAncienMandatPage {
  /**
   * The elements of type 'AncienMandat' in this page.
   */
  data: (GQLAncienMandat | null)[];

  /**
   * A cursor for elements coming after the current page.
   */
  after?: string;

  /**
   * A cursor for elements coming before the current page.
   */
  before?: string;
}

export interface GQLAncienMandat {
  /**
   * The document's ID.
   */
  _id?: string;
  DateDeDebut?: string;
  Depute?: GQLDepute;
  Intitule?: string;
  DateDeFin?: string;

  /**
   * The document's timestamp.
   */
  _ts?: GQLLong;
}

export enum GQLGroupeSigle {
  GDR = "GDR",
  LFI = "LFI",
  LR = "LR",
  LREM = "LREM",
  LT = "LT",
  MODEM = "MODEM",
  NI = "NI",
  NG = "NG",
  SOC = "SOC",
  UAI = "UAI"
}

export interface GQLMutation {
  /**
   * Update an existing document in the collection of 'Depute'
   */
  updateDepute?: GQLDepute;

  /**
   * Delete an existing document in the collection of 'Depute'
   */
  deleteDepute?: GQLDepute;

  /**
   * Update an existing document in the collection of 'AncienMandat'
   */
  updateAncienMandat?: GQLAncienMandat;

  /**
   * Update an existing document in the collection of 'AutreMandat'
   */
  updateAutreMandat?: GQLAutreMandat;

  /**
   * Create a new document in the collection of 'AncienMandat'
   */
  createAncienMandat: GQLAncienMandat;

  /**
   * Delete an existing document in the collection of 'AutreMandat'
   */
  deleteAutreMandat?: GQLAutreMandat;

  /**
   * Create a new document in the collection of 'Depute'
   */
  createDepute: GQLDepute;

  /**
   * Delete an existing document in the collection of 'AncienMandat'
   */
  deleteAncienMandat?: GQLAncienMandat;

  /**
   * Create a new document in the collection of 'AutreMandat'
   */
  createAutreMandat: GQLAutreMandat;
}

/**
 * 'Depute' input values
 */
export interface GQLDeputeInput {
  Slug?: string;
  Nom?: string;
  NomDeFamille?: string;
  Prenom?: string;
  Sexe?: GQLSexe;
  DateDeNaissance?: string;
  LieuDeNaissance?: string;
  NumeroDepartement?: string;
  NomCirconscription?: string;
  NumeroCirconscription?: number;
  DebutDuMandat?: string;
  SigleGroupePolitique?: GQLGroupeSigle;
  parti_ratt_financier?: string;
  Profession?: string;
  PlaceEnHemicycle?: string;
  URLAssembleeNationnale?: string;
  IDAssembleeNationnale?: string;
  URLNosdeputes?: string;
  URLNosdeputesAPI?: string;
  NombreMandats?: number;
  Twitter?: string;
  SitesWeb?: (string | null)[];
  Emails?: (string | null)[];
  Adresses?: (string | null)[];
  Collaborateurs?: (string | null)[];
  AnciensMandats?: GQLDeputeAnciensMandatsRelation;
  AutresMandats?: GQLDeputeAutresMandatsRelation;
}

/**
 * Allow manipulating the relationship between the types 'Depute' and 'AncienMandat'.
 */
export interface GQLDeputeAnciensMandatsRelation {
  /**
   * Create one or more documents of type 'AncienMandat' and associate them with the current document.
   */
  create?: (GQLAncienMandatInput | null)[];

  /**
   * Connect one or more documents of type 'AncienMandat' with the current document using their IDs.
   */
  connect?: (string | null)[];

  /**
   * Disconnect the given documents of type 'AncienMandat' from the current document using their IDs.
   */
  disconnect?: (string | null)[];
}

/**
 * 'AncienMandat' input values
 */
export interface GQLAncienMandatInput {
  DateDeDebut?: string;
  DateDeFin?: string;
  Intitule?: string;
  Depute?: GQLAncienMandatDeputeRelation;
}

/**
 * Allow manipulating the relationship between the types 'AncienMandat' and 'Depute' using the field 'AncienMandat.Depute'.
 */
export interface GQLAncienMandatDeputeRelation {
  /**
   * Create a document of type 'Depute' and associate it with the current document.
   */
  create?: GQLDeputeInput;

  /**
   * Connect a document of type 'Depute' with the current document using its ID.
   */
  connect?: string;

  /**
   * If true, disconnects this document from 'Depute'
   */
  disconnect?: boolean;
}

/**
 * Allow manipulating the relationship between the types 'Depute' and 'AutreMandat'.
 */
export interface GQLDeputeAutresMandatsRelation {
  /**
   * Create one or more documents of type 'AutreMandat' and associate them with the current document.
   */
  create?: (GQLAutreMandatInput | null)[];

  /**
   * Connect one or more documents of type 'AutreMandat' with the current document using their IDs.
   */
  connect?: (string | null)[];

  /**
   * Disconnect the given documents of type 'AutreMandat' from the current document using their IDs.
   */
  disconnect?: (string | null)[];
}

/**
 * 'AutreMandat' input values
 */
export interface GQLAutreMandatInput {
  Localite?: string;
  Institution?: string;
  Intitule?: string;
  Depute?: GQLAutreMandatDeputeRelation;
}

/**
 * Allow manipulating the relationship between the types 'AutreMandat' and 'Depute' using the field 'AutreMandat.Depute'.
 */
export interface GQLAutreMandatDeputeRelation {
  /**
   * Create a document of type 'Depute' and associate it with the current document.
   */
  create?: GQLDeputeInput;

  /**
   * Connect a document of type 'Depute' with the current document using its ID.
   */
  connect?: string;

  /**
   * If true, disconnects this document from 'Depute'
   */
  disconnect?: boolean;
}

export type GQLDate = any;

export type GQLTime = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  DeputePage?: GQLDeputePageTypeResolver;
  Depute?: GQLDeputeTypeResolver;
  AutreMandatPage?: GQLAutreMandatPageTypeResolver;
  AutreMandat?: GQLAutreMandatTypeResolver;
  Long?: GraphQLScalarType;
  AncienMandatPage?: GQLAncienMandatPageTypeResolver;
  AncienMandat?: GQLAncienMandatTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Date?: GraphQLScalarType;
  Time?: GraphQLScalarType;
}
export interface GQLQueryTypeResolver<TParent = any> {
  DeputesEnMandat?: QueryToDeputesEnMandatResolver<TParent>;
  Depute?: QueryToDeputeResolver<TParent>;
  findDeputeByID?: QueryToFindDeputeByIDResolver<TParent>;
  Deputes?: QueryToDeputesResolver<TParent>;
  findAutreMandatByID?: QueryToFindAutreMandatByIDResolver<TParent>;
  findAncienMandatByID?: QueryToFindAncienMandatByIDResolver<TParent>;
}

export interface QueryToDeputesEnMandatArgs {
  _size?: number;
  _cursor?: string;
}
export interface QueryToDeputesEnMandatResolver<
  TParent = any,
  TResult = GQLDeputePage | Promise<GQLDeputePage>
> {
  (
    parent: TParent,
    args: QueryToDeputesEnMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToDeputeArgs {
  Slug: string;
}
export interface QueryToDeputeResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (
    parent: TParent,
    args: QueryToDeputeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToFindDeputeByIDArgs {
  id: string;
}
export interface QueryToFindDeputeByIDResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (
    parent: TParent,
    args: QueryToFindDeputeByIDArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToDeputesArgs {
  _size?: number;
  _cursor?: string;
}
export interface QueryToDeputesResolver<
  TParent = any,
  TResult = GQLDeputePage | Promise<GQLDeputePage>
> {
  (
    parent: TParent,
    args: QueryToDeputesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToFindAutreMandatByIDArgs {
  id: string;
}
export interface QueryToFindAutreMandatByIDResolver<
  TParent = any,
  TResult = GQLAutreMandat | Promise<GQLAutreMandat>
> {
  (
    parent: TParent,
    args: QueryToFindAutreMandatByIDArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToFindAncienMandatByIDArgs {
  id: string;
}
export interface QueryToFindAncienMandatByIDResolver<
  TParent = any,
  TResult = GQLAncienMandat | Promise<GQLAncienMandat>
> {
  (
    parent: TParent,
    args: QueryToFindAncienMandatByIDArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface GQLDeputePageTypeResolver<TParent = any> {
  data?: DeputePageToDataResolver<TParent>;
  after?: DeputePageToAfterResolver<TParent>;
  before?: DeputePageToBeforeResolver<TParent>;
}

export interface DeputePageToDataResolver<
  TParent = any,
  TResult = Array<GQLDepute> | Promise<Array<GQLDepute>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputePageToAfterResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputePageToBeforeResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeputeTypeResolver<TParent = any> {
  LieuDeNaissance?: DeputeToLieuDeNaissanceResolver<TParent>;
  SitesWeb?: DeputeToSitesWebResolver<TParent>;
  DebutDuMandat?: DeputeToDebutDuMandatResolver<TParent>;
  NumeroDepartement?: DeputeToNumeroDepartementResolver<TParent>;
  Slug?: DeputeToSlugResolver<TParent>;
  parti_ratt_financier?: DeputeToParti_ratt_financierResolver<TParent>;
  URLNosdeputes?: DeputeToURLNosdeputesResolver<TParent>;
  _id?: DeputeTo_idResolver<TParent>;
  Emails?: DeputeToEmailsResolver<TParent>;
  URLNosdeputesAPI?: DeputeToURLNosdeputesAPIResolver<TParent>;
  Twitter?: DeputeToTwitterResolver<TParent>;
  NomDeFamille?: DeputeToNomDeFamilleResolver<TParent>;
  NomCirconscription?: DeputeToNomCirconscriptionResolver<TParent>;
  Profession?: DeputeToProfessionResolver<TParent>;
  AutresMandats?: DeputeToAutresMandatsResolver<TParent>;
  NombreMandats?: DeputeToNombreMandatsResolver<TParent>;
  Prenom?: DeputeToPrenomResolver<TParent>;
  Nom?: DeputeToNomResolver<TParent>;
  Sexe?: DeputeToSexeResolver<TParent>;
  DateDeNaissance?: DeputeToDateDeNaissanceResolver<TParent>;
  NumeroCirconscription?: DeputeToNumeroCirconscriptionResolver<TParent>;
  PlaceEnHemicycle?: DeputeToPlaceEnHemicycleResolver<TParent>;
  IDAssembleeNationnale?: DeputeToIDAssembleeNationnaleResolver<TParent>;
  Adresses?: DeputeToAdressesResolver<TParent>;
  URLAssembleeNationnale?: DeputeToURLAssembleeNationnaleResolver<TParent>;
  Collaborateurs?: DeputeToCollaborateursResolver<TParent>;
  AnciensMandats?: DeputeToAnciensMandatsResolver<TParent>;
  _ts?: DeputeTo_tsResolver<TParent>;
  SigleGroupePolitique?: DeputeToSigleGroupePolitiqueResolver<TParent>;
}

export interface DeputeToLieuDeNaissanceResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToSitesWebResolver<
  TParent = any,
  TResult = Array<string> | Promise<Array<string>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToDebutDuMandatResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToNumeroDepartementResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToSlugResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToParti_ratt_financierResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToURLNosdeputesResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeTo_idResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToEmailsResolver<
  TParent = any,
  TResult = Array<string> | Promise<Array<string>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToURLNosdeputesAPIResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToTwitterResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToNomDeFamilleResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToNomCirconscriptionResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToProfessionResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToAutresMandatsArgs {
  _size?: number;
  _cursor?: string;
}
export interface DeputeToAutresMandatsResolver<
  TParent = any,
  TResult = GQLAutreMandatPage | Promise<GQLAutreMandatPage>
> {
  (
    parent: TParent,
    args: DeputeToAutresMandatsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface DeputeToNombreMandatsResolver<
  TParent = any,
  TResult = number | Promise<number>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToPrenomResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToNomResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToSexeResolver<
  TParent = any,
  TResult = GQLSexe | Promise<GQLSexe>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToDateDeNaissanceResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToNumeroCirconscriptionResolver<
  TParent = any,
  TResult = number | Promise<number>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToPlaceEnHemicycleResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToIDAssembleeNationnaleResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToAdressesResolver<
  TParent = any,
  TResult = Array<string> | Promise<Array<string>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToURLAssembleeNationnaleResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToCollaborateursResolver<
  TParent = any,
  TResult = Array<string> | Promise<Array<string>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToAnciensMandatsArgs {
  _size?: number;
  _cursor?: string;
}
export interface DeputeToAnciensMandatsResolver<
  TParent = any,
  TResult = GQLAncienMandatPage | Promise<GQLAncienMandatPage>
> {
  (
    parent: TParent,
    args: DeputeToAnciensMandatsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface DeputeTo_tsResolver<
  TParent = any,
  TResult = GQLLong | Promise<GQLLong>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeputeToSigleGroupePolitiqueResolver<
  TParent = any,
  TResult = GQLGroupeSigle | Promise<GQLGroupeSigle>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutreMandatPageTypeResolver<TParent = any> {
  data?: AutreMandatPageToDataResolver<TParent>;
  after?: AutreMandatPageToAfterResolver<TParent>;
  before?: AutreMandatPageToBeforeResolver<TParent>;
}

export interface AutreMandatPageToDataResolver<
  TParent = any,
  TResult = Array<GQLAutreMandat> | Promise<Array<GQLAutreMandat>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatPageToAfterResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatPageToBeforeResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutreMandatTypeResolver<TParent = any> {
  Institution?: AutreMandatToInstitutionResolver<TParent>;
  _id?: AutreMandatTo_idResolver<TParent>;
  Depute?: AutreMandatToDeputeResolver<TParent>;
  Localite?: AutreMandatToLocaliteResolver<TParent>;
  Intitule?: AutreMandatToIntituleResolver<TParent>;
  _ts?: AutreMandatTo_tsResolver<TParent>;
}

export interface AutreMandatToInstitutionResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatTo_idResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatToDeputeResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatToLocaliteResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatToIntituleResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutreMandatTo_tsResolver<
  TParent = any,
  TResult = GQLLong | Promise<GQLLong>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAncienMandatPageTypeResolver<TParent = any> {
  data?: AncienMandatPageToDataResolver<TParent>;
  after?: AncienMandatPageToAfterResolver<TParent>;
  before?: AncienMandatPageToBeforeResolver<TParent>;
}

export interface AncienMandatPageToDataResolver<
  TParent = any,
  TResult = Array<GQLAncienMandat> | Promise<Array<GQLAncienMandat>>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatPageToAfterResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatPageToBeforeResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAncienMandatTypeResolver<TParent = any> {
  _id?: AncienMandatTo_idResolver<TParent>;
  DateDeDebut?: AncienMandatToDateDeDebutResolver<TParent>;
  Depute?: AncienMandatToDeputeResolver<TParent>;
  Intitule?: AncienMandatToIntituleResolver<TParent>;
  DateDeFin?: AncienMandatToDateDeFinResolver<TParent>;
  _ts?: AncienMandatTo_tsResolver<TParent>;
}

export interface AncienMandatTo_idResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatToDateDeDebutResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatToDeputeResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatToIntituleResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatToDateDeFinResolver<
  TParent = any,
  TResult = string | Promise<string>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AncienMandatTo_tsResolver<
  TParent = any,
  TResult = GQLLong | Promise<GQLLong>
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  updateDepute?: MutationToUpdateDeputeResolver<TParent>;
  deleteDepute?: MutationToDeleteDeputeResolver<TParent>;
  updateAncienMandat?: MutationToUpdateAncienMandatResolver<TParent>;
  updateAutreMandat?: MutationToUpdateAutreMandatResolver<TParent>;
  createAncienMandat?: MutationToCreateAncienMandatResolver<TParent>;
  deleteAutreMandat?: MutationToDeleteAutreMandatResolver<TParent>;
  createDepute?: MutationToCreateDeputeResolver<TParent>;
  deleteAncienMandat?: MutationToDeleteAncienMandatResolver<TParent>;
  createAutreMandat?: MutationToCreateAutreMandatResolver<TParent>;
}

export interface MutationToUpdateDeputeArgs {
  id: string;
  data: GQLDeputeInput;
}
export interface MutationToUpdateDeputeResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (
    parent: TParent,
    args: MutationToUpdateDeputeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDeputeArgs {
  id: string;
}
export interface MutationToDeleteDeputeResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (
    parent: TParent,
    args: MutationToDeleteDeputeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateAncienMandatArgs {
  id: string;
  data: GQLAncienMandatInput;
}
export interface MutationToUpdateAncienMandatResolver<
  TParent = any,
  TResult = GQLAncienMandat | Promise<GQLAncienMandat>
> {
  (
    parent: TParent,
    args: MutationToUpdateAncienMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateAutreMandatArgs {
  id: string;
  data: GQLAutreMandatInput;
}
export interface MutationToUpdateAutreMandatResolver<
  TParent = any,
  TResult = GQLAutreMandat | Promise<GQLAutreMandat>
> {
  (
    parent: TParent,
    args: MutationToUpdateAutreMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateAncienMandatArgs {
  data: GQLAncienMandatInput;
}
export interface MutationToCreateAncienMandatResolver<
  TParent = any,
  TResult = GQLAncienMandat | Promise<GQLAncienMandat>
> {
  (
    parent: TParent,
    args: MutationToCreateAncienMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteAutreMandatArgs {
  id: string;
}
export interface MutationToDeleteAutreMandatResolver<
  TParent = any,
  TResult = GQLAutreMandat | Promise<GQLAutreMandat>
> {
  (
    parent: TParent,
    args: MutationToDeleteAutreMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDeputeArgs {
  data: GQLDeputeInput;
}
export interface MutationToCreateDeputeResolver<
  TParent = any,
  TResult = GQLDepute | Promise<GQLDepute>
> {
  (
    parent: TParent,
    args: MutationToCreateDeputeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteAncienMandatArgs {
  id: string;
}
export interface MutationToDeleteAncienMandatResolver<
  TParent = any,
  TResult = GQLAncienMandat | Promise<GQLAncienMandat>
> {
  (
    parent: TParent,
    args: MutationToDeleteAncienMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateAutreMandatArgs {
  data: GQLAutreMandatInput;
}
export interface MutationToCreateAutreMandatResolver<
  TParent = any,
  TResult = GQLAutreMandat | Promise<GQLAutreMandat>
> {
  (
    parent: TParent,
    args: MutationToCreateAutreMandatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}
